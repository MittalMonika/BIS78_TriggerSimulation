//---------------------------------------------------------------------------//
//                                                                           //
// This file is part of the Pittsburgh Visualization System (PVS)            //
//                                                                           //
// Copyright (C) 2004 Joe Boudreau, University of Pittsburgh                 //
//                                                                           //
//  This program is free software; you can redistribute it and/or modify     //
//  it under the terms of the GNU General Public License as published by     //
//  the Free Software Foundation; either version 2 of the License, or        //
//  (at your option) any later version.                                      //
//                                                                           //
//  This program is distributed in the hope that it will be useful,          //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU General Public License for more details.                             //
//                                                                           //
//  You should have received a copy of the GNU General Public License        //
//  along with this program; if not, write to the Free Software              //
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307     //
// --------------------------------------------------------------------------//


class Tuple;
inline Attribute::Attribute(const std::string & name, const std::type_info & type):       
  m_name(name),                                                          
  m_type(typeOf(type)),                                               
  m_attrId(-1){}                                                         
//                                                                      
inline Attribute::Attribute(const std::string & name):                                    
  m_name(name),                                                          
  m_type(UNKNOWN),                                                        
  m_attrId(-1){}                                                         

inline std::string & Attribute::name() {return m_name;}                                    

inline const std::string & Attribute::name() const {return m_name;}                        


inline std::string  Attribute::typeName() const {return typenameOf(m_type);}                

inline const Attribute::Type & Attribute::type() const { return m_type;}

inline int & Attribute::attrId() { return m_attrId;}                          
inline unsigned int  Attribute::attrId() const { return m_attrId;}                          

//                                                                      
// Relational operators                                                 
inline bool Attribute::operator < (const Attribute & a) const {                           
  return (m_attrId != -1 && m_attrId < a.m_attrId ) || m_name < a.m_name;    
}                                                                       
//                                                                      
// Equality operator:                                                   
inline bool Attribute::operator== (const Attribute & a) const {                           
  return (m_attrId != -1 && m_attrId ==a.m_attrId ) || m_name == a.m_name;   
}                                                                       
//                                                                      
                                                                          
//                                                                      
class Attribute::NameEquals {                                                      
public:                                                                 
  NameEquals(const std::string & name) : m_name(name) {}                 
  bool operator () (const Attribute & a ) const {                       
    return m_name==a.name();                                             
  }                                                                     
private:                                                                
  std::string m_name;                                                    
};                                                                      

inline Attribute::Type Attribute::typeOf(const std::type_info & type ) {
  const std::string  & tn = type.name();
  if (tn=="d") {
    return DOUBLE;
  }
  else if (tn=="f") {
    return FLOAT;
  }
  else if (tn=="i") {
    return INT;
  }
  else if (tn=="j" || tn=="m") {
    return UINT;
  }
  else return UNKNOWN;
}

inline std::string Attribute::typenameOf(const Type type ) {
  if (type==DOUBLE) {
    return typeid((double) 0).name();
  }
  else if (type==FLOAT) {
    return typeid((float) (0)).name();
  }
  else if (type==INT) {
    return typeid((int) 0).name();
  }
  else if (type==UINT) {
    return typeid((size_t) 0).name();
  }
  else return "?";
}

