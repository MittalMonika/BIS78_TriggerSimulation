//---------------------------------------------------------------------------//
//                                                                           //
// This file is part of the Pittsburgh Visualization System (PVS)            //
//                                                                           //
// Copyright (C) 2004 Joe Boudreau, University of Pittsburgh                 //
//                                                                           //
//  This program is free software; you can redistribute it and/or modify     //
//  it under the terms of the GNU General Public License as published by     //
//  the Free Software Foundation; either version 2 of the License, or        //
//  (at your option) any later version.                                      //
//                                                                           //
//  This program is distributed in the hope that it will be useful,          //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU General Public License for more details.                             //
//                                                                           //
//  You should have received a copy of the GNU General Public License        //
//  along with this program; if not, write to the Free Software              //
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307     //
// --------------------------------------------------------------------------//


#include "QatDataAnalysis/AttributeListConstLink.h"
//#include "QatDataAnalysis/TupleLink.h"

inline Tuple::Tuple(AttributeListConstLink attributeList):
  m_attributeList(attributeList),m_status(true),m_doubleRep(NULL),
  m_doubleRepStale(true){
}

inline Tuple::Tuple(AttributeListConstLink attributeList, const ValueList & valList):
  m_attributeList(attributeList),
  m_valList(valList),
  m_status(true),
  m_doubleRep(NULL),
  m_doubleRepStale(true){
}


inline Tuple::~Tuple() {
  delete m_doubleRep;

}

inline ValueList & Tuple::valueList() {
  // If a nonconst version is ever accessed, we must assume that
  // the data values are going to change!!
  m_doubleRepStale=true;
  return m_valList;
}

inline const ValueList & Tuple::valueList() const {
  return m_valList;
}

inline const Tuple & Tuple::read (int & i, unsigned int pos) const {
  const std::string &typeName = (*m_attributeList)[pos].typeName();
  if (typeName=="i") {
    i = * (int *) m_valList[pos].asCharStar();
    m_status=true;
  }
  else {
    m_status=false;
  }
  return *this;
}


inline const Tuple & Tuple::read (double & d, unsigned int pos) const {
  const std::string &typeName = (*m_attributeList)[pos].typeName();
  if (typeName=="d") {
    d = * (double *) m_valList[pos].asCharStar();
    m_status=true;
  }
  else {
    m_status=false;
  }
  return *this;
}

inline const Tuple & Tuple::read (float & d, unsigned int pos) const {
  const std::string &typeName = (*m_attributeList)[pos].typeName();
  if (typeName=="f") {
    d = * (float *) m_valList[pos].asCharStar();
    m_status=true;
  }
  else {
    m_status=false;
  }
  return *this;
}

inline const Tuple & Tuple::read (unsigned int & i, unsigned int pos) const {
  const std::string &typeName = (*m_attributeList)[pos].typeName();
  if (typeName=="j"|| typeName=="m") {
    i = * (unsigned int *) m_valList[pos].asCharStar();
    m_status=true;
  }
  else {
    m_status=false;
  }
  return *this;
}
















inline void Tuple::fastread (int & i, unsigned int pos) const {
  i = * (int *) m_valList[pos].asCharStar();
}


inline void Tuple::fastread (double & d, unsigned int pos) const {
  d = * (double *) m_valList[pos].asCharStar();
}

inline void Tuple::fastread (float & d, unsigned int pos) const {
  d = * (float *) m_valList[pos].asCharStar();
}

inline void Tuple::fastread (unsigned int & i, unsigned int pos) const {
  i = * (unsigned int *) m_valList[pos].asCharStar();
}


inline void Tuple::uncache() const {
  delete m_doubleRep;
  m_doubleRep=NULL;
  m_doubleRepStale=true;	
}
