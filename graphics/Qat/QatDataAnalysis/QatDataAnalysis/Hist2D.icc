//---------------------------------------------------------------------------//
//                                                                           //
// This file is part of the Pittsburgh Visualization System (PVS)            //
//                                                                           //
// Copyright (C) 2004 Joe Boudreau, University of Pittsburgh                 //
//                                                                           //
//  This program is free software; you can redistribute it and/or modify     //
//  it under the terms of the GNU General Public License as published by     //
//  the Free Software Foundation; either version 2 of the License, or        //
//  (at your option) any later version.                                      //
//                                                                           //
//  This program is distributed in the hope that it will be useful,          //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU General Public License for more details.                             //
//                                                                           //
//  You should have received a copy of the GNU General Public License        //
//  along with this program; if not, write to the Free Software              //
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307     //
// --------------------------------------------------------------------------//
#include <algorithm>



class Hist2D::Clockwork {
	
public:
  
  std::string         name; 
  size_t              nBinsX;
  size_t              nBinsY;
  double              minX;
  double              maxX;
  double              minY;
  double              maxY;
  double              binWidthX;
  double              binWidthY;
  size_t              overUnderFlow[3][3];
  size_t              overflow;
  double              xW;
  double              xxW;
  double              yW;
  double              yyW;
  double              xyW;
  double              sumWeight;
  mutable double      minContents;
  mutable double      maxContents;
  std::vector<double> contents;
  std::vector<double> errors;


};



inline size_t Hist2D::ii(size_t i, size_t j) const {
  return m_c->nBinsX*j + i;
}

inline std::string & Hist2D::name() { return m_c->name;}

inline const std::string & Hist2D::name() const { return m_c->name;}

inline size_t Hist2D::nBinsX() const { return m_c->nBinsX;}
inline size_t Hist2D::nBinsY() const { return m_c->nBinsY;}

inline double Hist2D::minX() const {return m_c->minX;}
inline double Hist2D::minY() const {return m_c->minY;}

inline double Hist2D::maxX() const {return m_c->maxX;}
inline double Hist2D::maxY() const {return m_c->maxY;}

inline double Hist2D::binWidthX () const {return m_c->binWidthX;}
inline double Hist2D::binWidthY () const {return m_c->binWidthY;}

inline double Hist2D::binUpperEdgeX(unsigned int i, unsigned int  ) const {return m_c->minX + (i+1)*m_c->binWidthX;}
inline double Hist2D::binUpperEdgeY(unsigned int  , unsigned int j) const {return m_c->minY + (j+1)*m_c->binWidthY;}

inline double Hist2D::binLowerEdgeX(unsigned int i, unsigned int  ) const {return m_c->minX + i*m_c->binWidthX;}
inline double Hist2D::binLowerEdgeY(unsigned int  , unsigned int j) const {return m_c->minY + j*m_c->binWidthY;}

inline double Hist2D::binCenterX(unsigned int i, unsigned int  ) const { return m_c->minX + (i+0.5)*m_c->binWidthX;}
inline double Hist2D::binCenterY(unsigned int  , unsigned int j) const { return m_c->minY + (j+0.5)*m_c->binWidthY;}

inline double Hist2D::bin(unsigned int i, unsigned int j) const {return m_c->contents[ii(i,j)];}

inline double Hist2D::binError(unsigned int i, unsigned int j) const {return sqrt(m_c->errors[ii(i,j)]);}


inline size_t Hist2D::overflow() const {return m_c->overflow;}

inline size_t Hist2D::overflow(Hist2D::OVF a, Hist2D::OVF b) const { 
  return m_c->overUnderFlow[a][b];
}

inline double Hist2D::varianceX()  const { 
  if (m_c->sumWeight==0) {
    return 0;
  }
  else {
    return  m_c->xxW/m_c->sumWeight-(m_c->xW*m_c->xW/m_c->sumWeight/m_c->sumWeight);
  }
}
inline double Hist2D::varianceY()  const { 
  if (m_c->sumWeight==0) {
    return 0;
  }
  else {
    return  m_c->yyW/m_c->sumWeight-(m_c->yW*m_c->yW/m_c->sumWeight/m_c->sumWeight);
  }
}
inline double Hist2D::varianceXY() const { 
  if (m_c->sumWeight==0) {
    return 0;
  }
  else {
    return  m_c->xyW/m_c->sumWeight-(m_c->xW*m_c->yW/m_c->sumWeight/m_c->sumWeight);
  }
}

inline double Hist2D::meanX() const { 
  if (m_c->sumWeight==0) {
    return 0;
  }
  else {
    return  m_c->xW/m_c->sumWeight;
  }  
}

inline double Hist2D::meanY() const { 
  if (m_c->sumWeight==0) {
    return 0;
  }
  else {
    return  m_c->yW/m_c->sumWeight;
  }  
}

inline double Hist2D::sum() const { return m_c->sumWeight;}

inline double Hist2D::minContents () const { 
  if (m_c->minContents==0) {
    if (entries()!=0) {
      std::vector<double>::const_iterator min = std::min_element(m_c->contents.begin(),m_c->contents.end());
      if (min!=m_c->contents.end()) {
	m_c->minContents=*min;
      }
    }
  }
  return m_c->minContents;
}

inline double Hist2D::maxContents() const {
  if (m_c->maxContents==0) {
    if (entries()!=0) {
      std::vector<double>::const_iterator max = std::max_element(m_c->contents.begin(),m_c->contents.end());
      if (max!=m_c->contents.end()) {
	m_c->maxContents=*max;
      }
    }
  }
  return m_c->maxContents;
}

inline size_t Hist2D::entries() const {return m_c->overUnderFlow[InRange][InRange];}
