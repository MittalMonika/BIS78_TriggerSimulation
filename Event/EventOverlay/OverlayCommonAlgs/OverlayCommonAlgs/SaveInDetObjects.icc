/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/


#include "StoreGate/DataHandle.h"
#include "AthenaBaseComps/AthMsgStreamMacros.h"
#include <typeinfo>

template<class TypeToBeCopied, class Datum>
void SaveInDetObjects::copyInDetIDCobject(StoreGateSvc* from, StoreGateSvc *to) {

  typedef typename TypeToBeCopied::base_value_type Collection;

  const std::string templateClassName = typeid(TypeToBeCopied).name();

  typedef std::vector<std::string> KeyList;
  KeyList keys = from->keys<TypeToBeCopied>();
  if(keys.empty()) {
    ATH_MSG_WARNING("copyInDetIDCobject<"<<templateClassName<<">(): no keys found");
  }

  for (KeyList::const_iterator k=keys.begin(); k!=keys.end(); ++k) {
    TypeToBeCopied * newObject = 0;
    const TypeToBeCopied * oldObject=0;
    if ( from->retrieve(oldObject, *k).isFailure() ) {
       ATH_MSG_WARNING("copyInDetIDCobject<"<<templateClassName<<">(): problem retrieving container with " <<"key="<<*k);
       continue;
    }

    newObject = new TypeToBeCopied ( oldObject->size() );
    typename TypeToBeCopied::const_iterator iFirst = oldObject->begin();
    typename TypeToBeCopied::const_iterator iLast = oldObject->end();
    for (; iFirst != iLast; ++iFirst ) {
       Collection * element = new Collection ( (*iFirst)->identifyHash()  );
       element->setIdentifier( (*iFirst)->identify() );
       typename TypeToBeCopied::base_value_type::const_iterator firstData = (*iFirst)->begin();
       typename TypeToBeCopied::base_value_type::const_iterator lastData = (*iFirst)->end();
       for (; firstData != lastData; ++firstData) {
          Datum * newData = new Datum ( *(dynamic_cast<const Datum*>(*firstData)) );
          element->push_back ( newData );
       }
       if ( newObject->addCollection ( element, (*iFirst)->identifyHash() ).isFailure() ) {
          ATH_MSG_WARNING("copyInDetIDCobject<"<<templateClassName<<">(): problem adding collection with hash "<<"hash="<<(*iFirst)->identifyHash());
       }
    }

    if (!to->record(newObject, *k).isSuccess()) {
       ATH_MSG_WARNING("copyInDetIDCobject<"<<templateClassName<<">(): problem recording new container with "<<"key="<<*k);
    }

  }
}

