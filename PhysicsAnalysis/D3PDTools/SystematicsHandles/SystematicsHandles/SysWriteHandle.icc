//        Copyright Iowa State University 2017.
//                  Author: Nils Krumnack
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

// Please feel free to contact me (nils.erik.krumnack@cern.ch) for bug
// reports, feature suggestions, praise and complaints.


//
// includes
//

#include <SystematicsHandles/Helpers.h>

//
// method implementations
//

namespace EL
{
  template<typename T,typename Aux> template<typename T2> SysWriteHandle<T,Aux> ::
  SysWriteHandle (T2 *owner, const std::string& propertyName,
                 const std::string& propertyValue,
                 const std::string& propertyDescription)
    : m_outputName (propertyValue)
    , m_evtStoreGetter ([owner] () {return owner->evtStore();})
  {
    owner->declareProperty (propertyName, m_outputName, propertyDescription);
  }



  template<typename T,typename Aux> ::StatusCode SysWriteHandle<T,Aux> ::
  record (std::unique_ptr<T> object, std::unique_ptr<Aux> aux,
          const CP::SystematicSet& sys) const
  {
    auto cache = m_outputNameCache.find (sys);
    if (cache == m_outputNameCache.end())
    {
      std::string newName = detail::makeSystematicsName (m_outputName, sys);
      m_outputNameCache.insert (std::make_pair (sys, newName));
      cache = m_outputNameCache.find (sys);
      assert (cache != m_outputNameCache.end());
      if (!m_evtStore)
        m_evtStore = m_evtStoreGetter();
    }
    assert (m_evtStore);
    if (m_evtStore->record (aux.release(), cache->second + "Aux.").isFailure())
      return StatusCode::FAILURE;
    if (m_evtStore->record (object.release(), cache->second).isFailure())
      return StatusCode::FAILURE;
    return StatusCode::SUCCESS;
  }



  template<typename T> template<typename T2> SysWriteHandle<T,void> ::
  SysWriteHandle (T2 *owner, const std::string& propertyName,
                 const std::string& propertyValue,
                 const std::string& propertyDescription)
    : m_outputName (propertyValue)
    , m_evtStoreGetter ([owner] () {return owner->evtStore();})
  {
    owner->declareProperty (propertyName, m_outputName, propertyDescription);
  }



  template<typename T> ::StatusCode SysWriteHandle<T,void> ::
  record (std::unique_ptr<T> object, const CP::SystematicSet& sys) const
  {
    auto cache = m_outputNameCache.find (sys);
    if (cache == m_outputNameCache.end())
    {
      std::string newName = detail::makeSystematicsName (m_outputName, sys);
      m_outputNameCache.insert (std::make_pair (sys, newName));
      cache = m_outputNameCache.find (sys);
      assert (cache != m_outputNameCache.end());
      if (!m_evtStore)
        m_evtStore = m_evtStoreGetter();
    }
    assert (m_evtStore);
    return m_evtStore->record (object.release(), cache->second);
  }
}
