// This file's extension implies that it's C, but it's really -*- C++ -*-.

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id$
/**
 * @file PhotonD3PDMaker/src/IN4MSorterAlg.icc
 * @author Mike Hance
 * @date Feb, 2011
 * @brief This is a template class, and can't be used directly as an Algorithm.
 *        Derive a non-templated class from this to actually use.
 */


#include <functional>
#include "DataModel/OwnershipPolicy.h"
#include "AthenaKernel/errorcheck.h"


namespace D3PD {


/**
 * @brief Standard Gaudi algorithm constructor.
 * @param name The algorithm name.
 * @param svcloc The service locator.
 */
template <typename CONT>
IN4MSorterAlg<CONT>::IN4MSorterAlg (const std::string& name,
                                        ISvcLocator* svcloc)
  : IN4MSorterAlgBase (name, svcloc),
    m_outlist (0)
{
}


/**
 * @brief Store the element in the output list
 */
template <typename CONT>
StatusCode IN4MSorterAlg<CONT>::addElement (const INavigable4Momentum* ptr)
{

  const Element* elt = dynamic_cast<const Element*>(ptr);

  if (!m_outlist)
    m_outlist = new CONT(SG::VIEW_ELEMENTS);

  m_outlist->push_back(elt);

  return StatusCode::SUCCESS;
}


/**
 * @brief Store the output list in SG.
 */
template <typename CONT>
StatusCode IN4MSorterAlg<CONT>::commit ()
{
  if (!m_outlist)
    m_outlist = new CONT;
  else{
    IN4MEtSort comp;
    m_outlist->sort(comp);
  }

  CHECK( evtStore()->record (m_outlist, m_outputkey) );
  
  m_outlist = 0;
  return StatusCode::SUCCESS;
}

} // namespace D3PD
