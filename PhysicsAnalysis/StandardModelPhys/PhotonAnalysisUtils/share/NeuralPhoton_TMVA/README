This net was trained on my chisquare shifts on MC11A.  

To implement the net in your code, first declare the variable,

    NeuralPhoton photonNet("path/to/tmva/", 1, 0); // 2011 analyses

This should be the directory that _contains_ this README.

There are a number of methods implemented, of which photonNet.GetPassNetwork() is the most relevant to an end-user.  
It returns a boolean, e.g.,

    ph_nn_lead = photonNet.GetPassNetwork(etas2, pt, ph_convFlag, 
                     rhad, rhad1, reta, weta2, rphi, ws3, wstot, deltae, eratio, fside, f1, E277);

Where pt is the corrected energy over cosh(etas2).

There is an issue with ROOT 5.30/TMVA 4.1.2 and higher, whereby TMVA gives incorrect numerical output, without crashing.  
If you intend to use ROOT 5.30 or 5.32, please run the included script ./weightsToVersion30plus.sh before executing anything.  
You only need to run it once; afterwards the weight files will no longer work with 5.28 (if you need to go revert, just check it out again).
If you need to switch aback and forth between releases, let me know and I will reorganize the structure to allow for this.

Your Makefile should include something like this:

ROOTCFLAGS := $(shell root-config --cflags)
ROOTLIBS := $(shell root-config --libs) -lMinuit -lEG -lCintex
TMVALIBS := -L../lib -lTMVA -lMLP -lXMLIO
ROOTGLIBS = $(shell root-config --glibs)
...
LIBS    = $(ROOTLIBS) $(TMVALIBS)

Depending on how you check things out, you may have to change the include in NeuralPhoton.cxx.

Before running any analysis, I strongly encourage you to run

root -l NeuralPhoton.cxx++
root [0] cout << NeuralPhoton("tmva/").GetNetworkResponse(2.1948, 45923, 12, -0.0024004, -0.0024004, 0.93465, 0.012002, 0.91693, 0.60094, 1.2883, 56, 0.98624, 0.21713, 0.29276, 1) << endl;
Initializing the TMVA: tmva/
Loading Cuts from: tmva//const_rej_dict_NP.dat
0.56827

If you get a different value for this test (not 0.56827), with the included nets, then something is not working correctly.

As a further check, you may compare your values against the p868 ntuple production.  The data values in these ntuples should match what you calculate with this tool.  

N.B. that, like the PhotonIDTool, the MC must be shifted before applying doing this calculation.  The values in the ntuple correspond to the _unshifted_ values.

Please let me know if you have any questions or problems using the code.

