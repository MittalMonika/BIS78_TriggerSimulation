# Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration

# L2 Calo cut definitions for Electrons
# Ryan Mackenzie White <ryan.white@cern.ch>
# Akshay Katre
# Cuts migrated from L2CaloHypoConfig

from AthenaCommon.SystemOfUnits import GeV

class L2CaloCutMaps():
    # The following triggers were optimized in 2012 by YanPing
    # e12_loose1
    # e12_loose0
    # loose triggers above 22 GeV use e12_loose1 cut defs
    # e24_medium1 -- Higher threshold triggers use same cuts
    # tight/tight1 uses e24_medium1 cuts
    # New EF ID tunes will start with Run1 loose1,medium1,tight1 cuts
    # Cut maps are grouped by Et threshold
    # Adding vloose working points, same cuts as loose
    def __init__(self, threshold):
        ##########################
        # Et 5 GeV
        ##########################
        # e5_loose1
        ##########################
        # self.HADETthr       = [0.1738, 0.1696, 0.1318, 0.1738, 0.0548875, 0.1486, 0.1696, 0.1738, 0.157]
        # self.CAERATIOthr    = [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.]
        # self.CARCOREthr     = [0.532, 0.57, 0.646, 0.684, -9999., 0.722, 0.684, 0.722, -9999.]
        ##########################
        # e5_medium1
        #self.HADETthr       = [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147]
        #self.CARCOREthr     = [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70]
        #self.CAERATIOthr    = [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.]
        # e5_tight1
        # self.HADETthr        = [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147]
        # self.CARCOREthr      = [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70]
        # self.CAERATIOthr     = [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.]
        ##########################
        if(float(threshold) < 12):
            self.MapsHADETthr = {
                    'vloose': [0.1738, 0.1696, 0.1318, 0.1738, 0.0548875, 0.1486, 0.1696, 0.1738, 0.157],
                    'loose': [0.1738, 0.1696, 0.1318, 0.1738, 0.0548875, 0.1486, 0.1696, 0.1738, 0.157],
                    'loose1': [0.1738, 0.1696, 0.1318, 0.1738, 0.0548875, 0.1486, 0.1696, 0.1738, 0.157],
                    'lhvloose': [0.1738, 0.1696, 0.1318, 0.1738, 0.0548875, 0.1486, 0.1696, 0.1738, 0.157],
                    'lhloose': [0.1738, 0.1696, 0.1318, 0.1738, 0.0548875, 0.1486, 0.1696, 0.1738, 0.157],
                    'medium': [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147],
                    'lhmedium': [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147],
                    'medium1': [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147],
                    'tight': [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147],
                    'lhtight': [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147],
                    'tight1': [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147],
                    }
            self.MapsCAERATIOthr = {
                    'vloose': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'loose': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'loose1': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'lhvloose': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'lhloose': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'medium': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'lhmedium': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'medium1': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'tight': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'lhtight': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    'tight1': [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.],
                    }
            self.MapsCARCOREthr = {
                    'vloose': [0.532, 0.57, 0.646, 0.684, -9999., 0.722, 0.684, 0.722, -9999.],
                    'loose': [0.532, 0.57, 0.646, 0.684, -9999., 0.722, 0.684, 0.722, -9999.],
                    'loose1': [0.532, 0.57, 0.646, 0.684, -9999., 0.722, 0.684, 0.722, -9999.],
                    'lhvloose': [0.532, 0.57, 0.646, 0.684, -9999., 0.722, 0.684, 0.722, -9999.],
                    'lhloose': [0.532, 0.57, 0.646, 0.684, -9999., 0.722, 0.684, 0.722, -9999.],
                    'medium': [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70],
                    'lhmedium': [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70],
                    'medium1': [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70],
                    'tight': [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70],
                    'lhtight': [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70],
                    'tight1': [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70],
                    }
        ##########################
        # Et 12 GeV
        ##########################
        # e12_loose1
        #AT 30-March-2012 Optimisation by Yanping:
        #self.HADETthr      = [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675]
        #self.CARCOREthr    = [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.]
        #self.CAERATIOthr   = [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.]
        #AT: this optimisation could be well propagated to all loose1 triggers with ET>12 GeV if we need to cut L2 rate further
        # e12_medium1
        #self.HADETthr       = [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675]
        #self.CARCOREthr     = [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.]
        #self.CAERATIOthr   = [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.]
        # e12_tight
        # self.HADETthr       = [0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043]
        # self.CARCOREthr     = [0.90, 0.89, 0.89, 0.89, 0.90, 0.89, 0.89, 0.89, 0.89]
        # self.CAERATIOthr    = [0.60, 0.70, 0.70, 0.75, 0.85, 0.90, 0.90, 0.90, 0.90]
        elif(float(threshold) >= 12. and float(threshold) < 22):
            self.MapsHADETthr = { 
                 'loose1':  [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675],
                 'vloose':  [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675],
                 'loose':  [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675],
                 'lhvloose':  [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675],
                 'lhloose':  [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675],
                 'medium1':  [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675],
                 'medium':  [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675],
                 'lhmedium':  [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675],
                 'tight': [0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043],
                 'lhtight': [0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043],
                 'tight1': [0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043],
                 }
            self.MapsCARCOREthr = {
                    'loose1': [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.],
                    'vloose': [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.],
                    'loose': [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.],
                    'lhvloose': [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.],
                    'lhloose': [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.],
                    'medium': [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.],
                    'lhmedium': [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.],
                    'medium1': [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.],
                    'tight': [0.90, 0.89, 0.89, 0.89, 0.90, 0.89, 0.89, 0.89, 0.89],
                    'lhtight': [0.90, 0.89, 0.89, 0.89, 0.90, 0.89, 0.89, 0.89, 0.89],
                    'tight1': [0.90, 0.89, 0.89, 0.89, 0.90, 0.89, 0.89, 0.89, 0.89],
                    }
            self.MapsCAERATIOthr = {
                    'vloose': [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.],
                    'loose': [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.],
                    'lhvloose': [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.],
                    'lhloose': [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.],
                    'loose1': [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.],
                    'medium': [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.],
                    'lhmedium': [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.],
                    'medium1': [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.],
                    'tight': [0.60, 0.70, 0.70, 0.75, 0.85, 0.90, 0.90, 0.90, 0.90],
                    'lhtight': [0.60, 0.70, 0.70, 0.75, 0.85, 0.90, 0.90, 0.90, 0.90],
                    'tight1': [0.60, 0.70, 0.70, 0.75, 0.85, 0.90, 0.90, 0.90, 0.90],
                    }
        ##########################
        # Et 22 GeV
        ##########################
        # e24_medium1 / e24_tight1
        # AT 30-March-2012 Optimisation by Yanping:
        # self.HADETthr      = [0.0256693, 0.0240023, 0.0271098, 0.0206744, 0.0211902, 0.0301758, 0.0297629, 0.0295336, 0.020514]
        # self.CARCOREthr     = [0.882167, 0.882156, 0.857124, 0.886262, 0.724005, 0.871725, 0.902082, 0.887027, 0.744103]
        # self.CAERATIOthr    = [0.83009, 0.830144, 0.794944, 0.794558, -9999, 0.794933, 0.895365, 0.904011, -9999.]
        # e24_loose1
        # self.CAERATIOthr    = [-999., -999., -999., -999., -999., -999., -999., -999., -999.]
        # self.HADETthr      = [0.0275625, 0.0259875, 0.0291375, 0.0228375, 0.0259875, 0.0391125, 0.0359625, 0.0370125, 0.0291375]
        # self.CARCOREthr = [0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625]
        elif(float(threshold) >= 22.):
             self.MapsHADETthr = {       
                 'vloose':  [0.0275625, 0.0259875, 0.0291375, 0.0228375, 0.0259875, 0.0391125, 0.0359625, 0.0370125, 0.0291375],
                 'loose':  [0.0275625, 0.0259875, 0.0291375, 0.0228375, 0.0259875, 0.0391125, 0.0359625, 0.0370125, 0.0291375],
                 'lhvloose':  [0.0275625, 0.0259875, 0.0291375, 0.0228375, 0.0259875, 0.0391125, 0.0359625, 0.0370125, 0.0291375],
                 'lhloose':  [0.0275625, 0.0259875, 0.0291375, 0.0228375, 0.0259875, 0.0391125, 0.0359625, 0.0370125, 0.0291375],
                 'loose1':  [0.0275625, 0.0259875, 0.0291375, 0.0228375, 0.0259875, 0.0391125, 0.0359625, 0.0370125, 0.0291375],
                 'medium': [0.0256693, 0.0240023, 0.0271098, 0.0206744, 0.0211902, 0.0301758, 0.0297629, 0.0295336, 0.020514],
                 'lhmedium': [0.0256693, 0.0240023, 0.0271098, 0.0206744, 0.0211902, 0.0301758, 0.0297629, 0.0295336, 0.020514],
                 'medium1': [0.0256693, 0.0240023, 0.0271098, 0.0206744, 0.0211902, 0.0301758, 0.0297629, 0.0295336, 0.020514],
                 'tight':  [0.0256693, 0.0240023, 0.0271098, 0.0206744, 0.0211902, 0.0301758, 0.0297629, 0.0295336, 0.020514],
                 'lhtight':  [0.0256693, 0.0240023, 0.0271098, 0.0206744, 0.0211902, 0.0301758, 0.0297629, 0.0295336, 0.020514],
                 'tight1':  [0.0256693, 0.0240023, 0.0271098, 0.0206744, 0.0211902, 0.0301758, 0.0297629, 0.0295336, 0.020514],
                 }
             self.MapsCARCOREthr = {
                  'vloose': [0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                  'loose': [0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                  'lhvloose': [0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                  'lhloose': [0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                  'loose1': [0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                  'medium': [0.882167, 0.882156, 0.857124, 0.886262, 0.724005, 0.871725, 0.902082, 0.887027, 0.744103],
                  'lhmedium': [0.882167, 0.882156, 0.857124, 0.886262, 0.724005, 0.871725, 0.902082, 0.887027, 0.744103],
                  'medium1': [0.882167, 0.882156, 0.857124, 0.886262, 0.724005, 0.871725, 0.902082, 0.887027, 0.744103],
                  'tight': [0.882167, 0.882156, 0.857124, 0.886262, 0.724005, 0.871725, 0.902082, 0.887027, 0.744103],
                  'lhtight': [0.882167, 0.882156, 0.857124, 0.886262, 0.724005, 0.871725, 0.902082, 0.887027, 0.744103],
                  'tight1': [0.882167, 0.882156, 0.857124, 0.886262, 0.724005, 0.871725, 0.902082, 0.887027, 0.744103],
                  }
             self.MapsCAERATIOthr = {
                    'vloose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'loose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'lhvloose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'lhloose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'loose1': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'medium': [0.83009, 0.830144, 0.794944, 0.794558, -9999, 0.794933, 0.895365, 0.904011, -9999.],
                    'lhmedium': [0.83009, 0.830144, 0.794944, 0.794558, -9999, 0.794933, 0.895365, 0.904011, -9999.],
                    'medium1': [0.83009, 0.830144, 0.794944, 0.794558, -9999, 0.794933, 0.895365, 0.904011, -9999.],
                    'tight': [0.83009, 0.830144, 0.794944, 0.794558, -9999, 0.794933, 0.895365, 0.904011, -9999.],
                    'lhtight': [0.83009, 0.830144, 0.794944, 0.794558, -9999, 0.794933, 0.895365, 0.904011, -9999.],
                    'tight1': [0.83009, 0.830144, 0.794944, 0.794558, -9999, 0.794933, 0.895365, 0.904011, -9999.],
                    }
        else:
            raise RuntimeError('INCORRECT threshold: No cuts configured')

