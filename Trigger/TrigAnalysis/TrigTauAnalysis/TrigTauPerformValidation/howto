/* quick start up to run on TTPs created from RDOs. More details and comments are below */

gSystem->Load("libHist.so");
gSystem->Load("libTree.so");
gSystem->Load("libGpad.so");
gSystem->Load("libCore.so");

gSystem->Load("lib/TrigTauPerformNtuple/libTrigTauPerformNtuple.so");
gSystem->Load("lib/TrigTauPerformAnalysis/libTrigTauPerformAnalysis.so");
gSystem->Load("lib/TrigTauPerformValidation/libTrigTauPerformValidation.so");

TTPValCutStudy study("ntuples/TTP09/tmp.*");
study.analyze();
study.print();

TTPValEffTableMaker maker("ntuples/TTP09/tmp.*");
maker.analyze();
maker.print(); 


//------------------------------------------------------------------

//Here are two examples of how to use the validation classes:
(the usage of other tools in this package is almost the same, please have a look at the 'manual')

//========TTPValCutStudy======
//This class prints out relative and absolute efficiency curves after each cut. This is plotted as function of pt, eta and phi.

TTPValCutStudy study;  //create CutStudy object (this assumes you run on TTPs created from RDOs. to run on TTPs from AODs give 'TrigTauBugFix::AOD' as argument
study.setFile("ntuples/TTP09/tmp.*"); //define which file(s) is/are used
//also possible:    TTPValCutStudy study("ntuplest/TTP09/tmp.*");
//if on TTPs from AODs: TTPValCutStudy study("ntuplest/TTP09/tmp.*", TrigTauBugFix::AOD); 

//The following settings are all optional
study.setType(0);  			//Type referes to the type of the efficiencies; 0 - absolute and 1- relative; 1 is default
study.setNprong(3);  			//Only look at 3-prong decays; default is 0 - no selection;
study.setMenu(TrigTauFlags::TAU35I); 	//defines which menu is used; default is TAU20I
study.setCutLevel(TrigTauSelectionManager::TIGHT); //cutlevel is set to TIGHT; default is LOOSE
study.setOfflineType(TrigTauMCTauList::BOTHTAU); //offline matching set to BOTHTAU; default is EITHERTAU; NONE is currently not implemented; other options: TAUREC and TAU1P3P
study.setChainType(TrigTauFlags::IDSCAN); //default is SITRK; for other values see TrigTauFlags.h
study.setNamingConvention(TrigTauFlags::MENU1560) //default is MENU1600, needs to be set to MENU1560 only for older ntuples (produced before change of default L2 tracking algorithm to SITRK	
study.setMaxVisEta(1.); 		//default is 2.5
study.setMinLeadingPt(9.0); 		//default is 6.0

//Now, start analyzing and printing the result
study.analyze();
study.print();				//creates file ntuple.eps with all efficiency histograms
study.save("ntuple.root");		//saves histograms in ntuple.root
study.compare("ntuple.root");		//plots analyzed histograms with the histograms from ntuple.root and prints it in ntuple.eps


======TTPValEffTableMaker======
//This class prints out relative and absolute efficiencies for each trigger level for different offline matching and 1-prong/3-prong/all decay

TTPValEffTableMaker maker;  //give 'TrigTauBugFix::AOD' as argument if you run on TTPs created from AODs
maker.setFile("ntuples/TTP09/tmp.*");

//The following settings are all optional
maker.setMenu(TrigTauFlags::TAU35I); 			//defines which menu is used; default is TAU20I
maker.setCutLevel(TrigTauSelectionManager::TIGHT); 	//cutlevel is set to TIGHT; default is LOOSE
maker.setMaxVisEta(2.3); 				//default is 2.5
maker.setMinLeadingPt(5.0); 				//default is 6.0
maker.setChainType(TrigTauFlags::IDSCAN);                //default is SITRK; for other values see TrigTauFlags.h

//Now, start analyzing and printing the result
maker.analyze();
maker.print(0); 					//printing absolute efficiencies; without argument: relative efficiencies
maker.print(1); 					//printing relative efficiencies


=====TTPValBackgroundStudy=====
//Prints efficiency with respect of pt, eta, phi. Prints also rates for given luminosity and x-section

TTPValBackgroundRate brate("../data/ntuples/TTP14/5010/tmp*");
brate.analyze();
brate.print(1E31, 1.38E-27);	//prints rates for lum=10^31 and x-section 1.38x10^-27 (which is the x-section of 5010)


  

