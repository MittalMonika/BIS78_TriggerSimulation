# Dear emacs, this is a -*- Makefile -*-
# $Id: Makefile.standalone 484845 2012-02-24 08:33:38Z krasznaa $
#
# Standalone makefile for compiling the non Athena specific parts of the package
# into a shared library that can be linked against practically any kind of
# ntuple analysis code.
#
# The makefile relies on ROOT to be set up. Not because the package would rely
# on ROOT, but because the architecture file of ROOT is very helpful in creating
# flexible makefiles. Also, the package is expected to start using ROOT later
# on.
#
# To compile the standalone library, call "make -f Makefile.standalone" in this
# directory. Then set up your analysis code to get access to the header files
# of the package (you'll also need to access the headers in the src/ directory)
# and to link itself against the created ../standalone/libTrigBunchCrossingTool.so
# shared library.
#
# $Revision: 484845 $
# $Date: 2012-02-24 09:33:38 +0100 (Fri, 24 Feb 2012) $

#
# Include the architecture definitions from the ROOT sources
#
#  Makefile.arch can be in a number of different locations depending on the system
#  you're compiling on. The Fink installed version of ROOT for instance has this file
#  in a different location than the "normally installed" ROOT versions...
#
#  The library doesn't depend on ROOT at the moment, but the plan is to make it
#  depend on it later on.
#
ARCH_LOC_1 := $(wildcard $(shell root-config --prefix)/test/Makefile.arch)
ARCH_LOC_2 := $(wildcard $(shell root-config --prefix)/share/root/test/Makefile.arch)
ARCH_LOC_3 := $(wildcard $(shell root-config --prefix)/share/doc/root/test/Makefile.arch)
ARCH_LOC_4 := $(wildcard $(shell root-config --prefix)/etc/Makefile.arch)
ifneq ($(strip $(ARCH_LOC_1)),)
  $(info Using $(ARCH_LOC_1))
  include $(ARCH_LOC_1)
else
  ifneq ($(strip $(ARCH_LOC_2)),)
    $(info Using $(ARCH_LOC_2))
    include $(ARCH_LOC_2)
  else
    ifneq ($(strip $(ARCH_LOC_3)),)
      $(info Using $(ARCH_LOC_3))
      include $(ARCH_LOC_3)
    else
      ifneq ($(strip $(ARCH_LOC_4)),)
        $(info Using $(ARCH_LOC_4))
        include $(ARCH_LOC_4)
      else
        $(error Could not find Makefile.arch! ROOT not set up?)
      endif
    endif
  endif
endif

# Name of the library to create:
LIBRARY = TrigBunchCrossingTool

# Various directories:
SRCDIR = ../Root
OUTDIR = ../standalone
DEPDIR = $(OUTDIR)/dep

# The sources that can be compiled in standalone mode:
SOURCES = $(SRCDIR)/MsgLogger.cxx $(SRCDIR)/MsgWriter.cxx $(SRCDIR)/LogWriter.cxx \
          $(SRCDIR)/BunchCrossing.cxx $(SRCDIR)/BunchTrain.cxx \
          $(SRCDIR)/BunchCrossingToolBase.cxx \
          $(SRCDIR)/StaticBunchCrossingToolSA.cxx \
          $(SRCDIR)/WebBunchCrossingToolSA.cxx \
          $(SRCDIR)/D3PDBunchCrossingToolSA.cxx

# Location of the created libraries:
SHLIBFILE = $(OUTDIR)/lib$(LIBRARY).$(DllSuf)
LIBFILE   = $(OUTDIR)/lib$(LIBRARY).a

# Set various variables for the compilation:
OBJECTS   = $(patsubst %.$(SrcSuf),%.$(ObjSuf),$(notdir $(SOURCES)))
INCLUDES += -I../ -I../../TrigAnalysisInterfaces/
CXXFLAGS += -DROOTCORE
VPATH    += $(OUTDIR) $(SRCDIR)

# The default is to create the shared library:
default: $(SHLIBFILE) $(LIBFILE)

# Implicit rule to compile all sources
%.$(ObjSuf) : %.$(SrcSuf)
	@echo "Compiling $<"
	@mkdir -p $(OUTDIR)
	@$(CXX) $(CXXFLAGS) -O2 -c $< -o $(OUTDIR)/$(notdir $@) $(INCLUDES)

# Rule to link the shared library
$(SHLIBFILE): $(OBJECTS) Makefile.standalone
		@echo "Making shared library: $(SHLIBFILE)"
		@mkdir -p $(OUTDIR)
		@rm -f $(SHLIBFILE)
ifneq (,$(findstring macosx,$(ARCH)))
		@$(LD) $(LDFLAGS) -dynamiclib -single_module -undefined dynamic_lookup \
			$(addprefix $(OUTDIR)/,$(OBJECTS)) -o $@
else
		@$(LD) $(LDFLAGS) $(SOFLAGS) $(addprefix $(OUTDIR)/,$(OBJECTS)) -o $@
endif

# Rule to create the static library
$(LIBFILE): $(OBJECTS) Makefile.standalone
		@echo "Making static library: $(LIBFILE)"
		@mkdir -p $(OUTDIR)
		@rm -f $(LIBFILE)
		@ar rcs $@ $(addprefix $(OUTDIR)/,$(OBJECTS))

# Rule to clean the directory
clean:
		@rm -f $(OUTDIR)/*.$(ObjSuf)
		@rm -f $(SHLIBFILE)

distclean:
		@rm -rf $(OUTDIR)

##############################
# The dependencies section   
# - the purpose of the .d files is to keep track of the
#   header file dependence
# - this can be achieved using the makedepend command 
##############################
# .d tries to pre-process .cc
-include $(foreach var,$(notdir $(SOURCES:.$(SrcSuf)=.d)),$(DEPDIR)/$(var))

$(DEPDIR)/%.d: %.$(SrcSuf)
	@mkdir -p $(DEPDIR)
	@if test -f $< ; then \
		echo "Making $(@F)"; \
		$(SHELL) -ec '$(CPP) -MM $(CXXFLAGS) $(INCLUDES) $< | sed '\''/Cstd\/rw/d'\'' > $@'; \
	fi
