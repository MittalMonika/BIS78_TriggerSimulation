This is a package of helpers to make gdb more useful in Atlas.

It requires gdb 7.2sss1.  Note that the code here relies on some extensions
in the sss version that are not in standard gdb.  See README.atlas in the
gdb-7.2sss1 package for a list of these extensions.

If you have this package installed under your home directory,
then you can enable it by adding this line to your .gdbinit:

python import os; execfile(os.path.expanduser('~/gdbhacks/init.py'))

Adjust the path appropriately if you've installed it somewhere else.

Loading init.py will do the following:

 - Remove all directories from sys.path except for system paths.
   This is needed because gdb is built against the system python;
   in general, this will not work with the libraries for the version
   of python being used by atlas.

 - Add the gdbhacks directory to sys.path and the gdb source search path.
   This means that the gdb `source' command and the python `import' statement
   will both search the gdbhacks package.

 - gdb will be configured so that when symbols for an Atlas/LCG library
   are loaded, it will automatically try to add the proper directories
   to the source search path.

   Only tested for the built releases on lxplus.

 - New gdb command: pyinteract

   pyinteract will give you a python prompt from within gdb.
   Press ctrl-D to exit back to gdb.

   Caveats: The gdb keyboard handler is being used to read the input
            here.  That means that usual gdb completions will still
            be done at the python prompt and gdb bindings like ctrl-x
            still function. Ctrl-c should be able to interrupt python
            code, but this hasn't been tested very extensively.

            gdb and python share the same command history.

 - New gdb command: findlib

   This takes an address as an argument.  findlib will find the
   shared library containing this address and attempt to load symbols
   from that library.  This is sometimes useful in the case where
   you've turned off automatic symbol loading.

 - New gdb command: import

     import FOO

   is shorthand for

     python import FOO


Optional commands available:

 - source classname

   For some reason, the fName member of TClass is not visible from gdb.
   The classname command prints the name of a TClass, given a pointer to it.
   (Also works to print the name of other root object types.)

 - import libstdcxx

   Importing this module turns on formatted dumps of STL containers.

 - import pointerprint

   Importing this module changes the way pointers are printed.
   If a pointer points at an object with a virtual table,
   gdb will attempt to print the dynamic type of the object.

 - source stl2

   Old gdb macros for dumping STL containers.
   Probably obsolete.

 - source dump_cinttags

   gdb macro to dump the names of all defined CINT tags.
