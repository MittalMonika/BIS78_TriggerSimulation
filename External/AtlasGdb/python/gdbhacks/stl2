# gdb commands to help dump stl containers with gcc >= 3.4.
# v1 for atlas wiki, sss, aug 24, 2007.

# Define these to print out the list/map nodes that you have.

define list_node
  set $ptr=$arg0
  p *(int*)$ptr
end

define map_node
  set $ptr=$arg0
  #printf "node %llx %d\n", *(long long*)$ptr, *(int*)($ptr+8)
  printf "node %d 0x%x\n", *(int*)($ptr), *(void**)($ptr+4)
end

###############################################################
# Iterate over lists.  Initialize with list_init; then use list_next.

define list_init
  set $listptr=&$arg0
  set $list_p = &($listptr->_M_impl._M_node)
  set $list_end = &($listptr->_M_impl._M_node)
  list_advance
end

define list_advance
  set $list_p = *(void**)$list_p
end

define list_next
  if $list_p == $list_end
    echo End of list\n
  else
    list_node (void*)((void**)$list_p+2)
    list_advance
  end
end

###############################################################
# Iterate over maps.  Initialize with map_init; then use map_next.

define map_init
  set $mapptr=&$arg0
  set $map_p=(void**)$mapptr->_M_t._M_impl._M_header._M_left
  set $map_end=(void**)&($mapptr->_M_t._M_impl._M_header)
end

define map_advance
  if $map_p == $map_end
    echo "End of map"
  else
    if *($map_p + 3) != 0
      set $map_p = (void**) *($map_p+3)
      while *($map_p + 2) != 0
        set $map_p = (void**) *($map_p+2)
      end
    else
      set $map_y = (void**) *($map_p+1)
      while $map_p == (void**) *($map_y+3)
        set $map_p = $map_y
        set $map_y = (void**) *($map_y+1)
      end
      if (void**) *($map_p+3) != $map_y
        set $map_p = $map_y
      end
    end
  end
end

define map_next
  if $map_p == $map_end
    echo End of map\n
  else
    map_node (void*)((void**)$map_p+4)
    map_advance
  end
end


###############################################################
# Print the size of a vector.

define vector_size
  p $arg0._M_impl._M_finish-$arg0._M_impl._M_start
end
