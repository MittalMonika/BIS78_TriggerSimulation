=== modified file 'gdb/config.in'
--- gdb/config.in	2010-11-12 17:13:12 +0000
+++ gdb/config.in	2010-11-13 14:17:55 +0000
@@ -220,6 +220,9 @@
 /* Define to 1 if you have the `m' library (-lm). */
 #undef HAVE_LIBM
 
+/* Define if Python 2.3 is being used. */
+#undef HAVE_LIBPYTHON2_3
+
 /* Define if Python 2.4 is being used. */
 #undef HAVE_LIBPYTHON2_4
 

=== modified file 'gdb/configure'
--- gdb/configure	2010-11-12 17:13:12 +0000
+++ gdb/configure	2010-11-13 14:17:55 +0000
@@ -10864,6 +10864,48 @@
 
   fi
 
+
+
+  if test ${have_libpython} = no; then
+
+  version=python2.3
+
+
+  HAVE_LIBPYTHON2_3=no
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ${version}" >&5
+$as_echo_n "checking for ${version}... " >&6; }
+  save_LIBS=$LIBS
+  LIBS="$LIBS -l${version}"
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include "${version}/Python.h"
+int
+main ()
+{
+Py_Initialize ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  HAVE_LIBPYTHON2_3=yes
+                  have_libpython=yes
+else
+  LIBS=$save_LIBS
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $HAVE_LIBPYTHON2_3" >&5
+$as_echo "$HAVE_LIBPYTHON2_3" >&6; }
+
+    if test "${HAVE_LIBPYTHON2_3}" = yes; then
+
+$as_echo "#define HAVE_LIBPYTHON2_3 1" >>confdefs.h
+
+    fi
+  fi
+
+
   if test "${have_libpython}" = no; then
     case "${with_python}" in
     yes)

=== modified file 'gdb/python/python-internal.h'
--- gdb/python/python-internal.h	2010-11-12 17:13:12 +0000
+++ gdb/python/python-internal.h	2010-11-13 14:17:55 +0000
@@ -36,7 +36,21 @@
 #undef _POSIX_C_SOURCE
 #undef _XOPEN_SOURCE
 
-#if HAVE_LIBPYTHON2_4
+#if HAVE_LIBPYTHON2_3
+#include "python2.3/Python.h"
+#include "python2.3/compile.h"
+#include "python2.3/frameobject.h"
+/* Py_ssize_t is not defined until 2.5.
+   Logical type for Py_ssize_t is Py_intptr_t, but that fails in 64-bit
+   compilation due to several apparent mistakes in python2.4 API, so we
+   use 'int' instead.  */
+typedef int Py_ssize_t;
+
+# define Py_RETURN_FALSE return Py_INCREF(Py_None), Py_None
+# define Py_RETURN_NONE return Py_INCREF(Py_None), Py_None
+# define Py_RETURN_TRUE return PyInt_FromLong(1)
+
+#elif HAVE_LIBPYTHON2_4
 #include "python2.4/Python.h"
 #include "python2.4/frameobject.h"
 /* Py_ssize_t is not defined until 2.5.

