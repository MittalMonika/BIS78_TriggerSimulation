Enabling thread checks.  One of the following:

  - Function or type directly has a gnu::check_thread_safety attribute.
  - Containing context for a function of type
    has a gnu::check_thread_safety attribute.
  - File contains `#pragma ATLAS check_thread_safety'.
  - The package contains a file ATLAS_CHECK_THREAD_SAFETY.


=========================================================================
check_direct_static_use (thread1_test)
  Warns about use of a non-const static value.

int f1(int xx)
{
  static int x;
  x = xx;
  return x;
}

  gets two warnings.

  Can suppress by:
    - Declaring value as thread_local.
         static thread_local int x;

    - Adding a thread_safe attribute:
        static int x [[gnu::thread_safe]];

    - Adding not_thread_safe or not_reentrant to the function:
         int f5 [[gnu::not_thread_safe]] (int xx)
         int f6 [[gnu::not_reentrant]] (int xx)
    

=========================================================================
check_assign_address_of_static (thread2_test)

Check for binding a non-const pointer or reference to a static.

For example:

static int y1;
int* f1()
{
  return &y1;
}


  Can suppress by:
    - Declaring value as thread_local.
         static thread_local int y1;

    - Adding a thread_safe attribute:
        static int x [[gnu::thread_safe]];

    - Adding not_thread_safe or not_reentrant to the function:
         int f5 [[gnu::not_thread_safe]] (int xx)
         int f6 [[gnu::not_reentrant]] (int xx)


=========================================================================
check_pass_static_by_call (thread3_test)

Check for passing a static to a non-const pointer or reference
function argument.

Example:

static int y1;
void foo1(int, int*);
void f1()
{
  foo1(3, &y1);
}


  Can suppress by:
    - Declaring value as thread_local.
         static thread_local int y1;

    - Adding a thread_safe attribute:
        static int x [[gnu::thread_safe]];

    - Adding not_thread_safe or not_reentrant to the function:
         int f5 [[gnu::not_thread_safe]] (int xx)
         int f6 [[gnu::not_reentrant]] (int xx)


=========================================================================
check_discarded_const (thread4_test)


Check for discarding const from a pointer/reference.

Example:

int* f1(const int* y)
{
  return const_cast<int*>(y);
}


  Can suppress by:

    - Adding a thread_safe attribute to the LHS of an assignment
      that discards const:
        const int* y;
        int* yy [[gnu::thread_safe]] = (int*)y;

    - Adding a not_thread_safe attribute to the function.

    - Adding a not_const_thread_safe attribute to the function, when
      it discards const from something that is not an argument.

    - Adding an argument_not_const_thread_safe attribute to the function, when
      it discards const from an argument.


=========================================================================
check_discarded_const_in_funcall (thread5_test)


Check for discarding const from a pointer/reference in a function call.

Example:

const int* xx();
void f1(int* y);
void f2(const int* y)
{
  f1(const_cast<int*>(y));
}


  Can suppress by:

    - Adding a not_thread_safe attribute to the function.

    - Adding a not_const_thread_safe attribute to the function, when
      it discards const from something that is not an argument.
