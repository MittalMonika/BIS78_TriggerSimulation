# Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration

from AthenaCommon import Logging
from ...decorators import timed
from ...utility import LHE, ProcessManager, SingleProcessThread
import glob
import os
import shutil
import subprocess

## Get handle to Athena logging
logger = Logging.logging.getLogger("PowhegControl")


@timed("MadSpin post-processing")
def MadSpin(process, powheg_LHE_output):
    """! Move output to correctly named file.

    @param process            External MadSpin process.
    @param powheg_LHE_output  Name of LHE file produced by PowhegBox.

    @author James Robinson <james.robinson@cern.ch>
    """
    process.expose()
    __construct_inputs(powheg_LHE_output, process)
    __run_executable(process.executable)
    __prepare_outputs(powheg_LHE_output)


def __construct_inputs(input_LHE_events, process):
    """! Construct MadSpin runcard.

    @param input_LHE_events Input LHE file name.
    @param process          MadSpin process.
    """
    # Find insertion point for MadSpin header
    logger.info("Constructing MadSpin runcard header")
    opening_string = LHE.get_opening_string(input_LHE_events)
    closing_string = LHE.get_closing_string(input_LHE_events)
    if opening_string.find("<header>") != -1:
        pre_header = opening_string[: opening_string.find("<header>")]
        post_header = opening_string[opening_string.find("<header>") + 8: opening_string.find("</header>") + 10]
    else:
        pre_header = opening_string[: opening_string.find("<init>")]
        post_header = "</header>\n" + opening_string[opening_string.find("<init>"): opening_string.find("</init>") + 8]

    # Write events to LHE file with MadSpin information
    with open("madspin_LHE_input.lhe", "wb") as f_madspin_LHE:
        f_madspin_LHE.write(pre_header)
        f_madspin_LHE.write("<header>\n")
        f_madspin_LHE.write("<mgversion>\n")
        f_madspin_LHE.write("{}\n".format(os.environ["MADPATH"].split("/")[-1].split("v")[-1].split("_p")[0].replace("_", ".")))
        f_madspin_LHE.write("</mgversion>\n")
        f_madspin_LHE.write("<mg5proccard>\n")
        f_madspin_LHE.write("set group_subprocesses Auto\n")
        f_madspin_LHE.write("set ignore_six_quark_processes False\n")
        f_madspin_LHE.write("set loop_optimized_output True\n")
        f_madspin_LHE.write("set gauge unitary\n")
        f_madspin_LHE.write("set complex_mass_scheme False\n")
        f_madspin_LHE.write("import model loop_sm-ckm\n")
        f_madspin_LHE.write("define p = g u c d s u~ c~ d~ s~\n")
        f_madspin_LHE.write("define j = g u c d s u~ c~ d~ s~\n")
        f_madspin_LHE.write("define l+ = e+ mu+ ta+\n")
        f_madspin_LHE.write("define l- = e- mu- ta-\n")
        f_madspin_LHE.write("define vl = ve vm vt\n")
        f_madspin_LHE.write("define vl~ = ve~ vm~ vt~\n")
        f_madspin_LHE.write("{}\n".format(process.MadSpin_process))
        f_madspin_LHE.write("output tchan\n")
        f_madspin_LHE.write("</mg5proccard>\n")
        f_madspin_LHE.write("<mgruncard>\n")
        f_madspin_LHE.write("{} = nevents\n".format(LHE.event_counter(input_LHE_events)))
        f_madspin_LHE.write("1   =  lpp1     ! beam 1 type (0 = no PDF)\n")
        f_madspin_LHE.write("1   =  lpp2     ! beam 2 type (0 = no PDF)\n")
        f_madspin_LHE.write("{} =  ebeam1   ! beam 1 energy in GeV\n".format(process.beam_energy))
        f_madspin_LHE.write("{} =  ebeam2   ! beam 2 energy in GeV\n".format(process.beam_energy))
        f_madspin_LHE.write("15  =  bwcutoff\n")
        f_madspin_LHE.write("</mgruncard>\n")
        f_madspin_LHE.write("<slha>\n")
        f_madspin_LHE.write("######################################################################\n")
        f_madspin_LHE.write("## PARAM_CARD AUTOMATICALY GENERATED BY MG5                       ####\n")
        f_madspin_LHE.write("######################################################################\n")
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("## INFORMATION FOR LOOP\n")
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("BLOCK LOOP #\n")
        f_madspin_LHE.write("      1 {:e} #   mu_r\n".format(process.mass_Z))
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("## INFORMATION FOR MASS\n")
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("BLOCK MASS #\n")
        f_madspin_LHE.write("      1 0.000000e+00 #   d : 0.0\n")
        f_madspin_LHE.write("      2 0.000000e+00 #   u : 0.0\n")
        f_madspin_LHE.write("      3 0.000000e+00 #   s : 0.0\n")
        f_madspin_LHE.write("      4 0.000000e+00 #   c : 0.0\n")
        f_madspin_LHE.write("      5 {:e} #   mb\n".format(process.mass_b))
        f_madspin_LHE.write("      6 {:e} #   mt\n".format(process.mass_t))
        f_madspin_LHE.write("      11 0.000000e+00 #   e- : 0.0\n")
        f_madspin_LHE.write("      12 0.000000e+00 #   ve : 0.0\n")
        f_madspin_LHE.write("      13 0.000000e+00 #   mu- : 0.0\n")
        f_madspin_LHE.write("      14 0.000000e+00 #   vm : 0.0\n")
        f_madspin_LHE.write("      15 {:e} #   mta\n".format(process.mass_tau))
        f_madspin_LHE.write("      16 0.000000e+00 #   vt : 0.0\n")
        f_madspin_LHE.write("      21 0.000000e+00 #   g : 0.0\n")
        f_madspin_LHE.write("      22 0.000000e+00 #   a : 0.0\n")
        f_madspin_LHE.write("      23 {:e} #   mz\n".format(process.mass_Z))
        f_madspin_LHE.write("      24 {:e} #   w+\n".format(process.mass_W))
        f_madspin_LHE.write("      25 {:e} #   mh\n".format(process.mass_H))
        f_madspin_LHE.write("      82 0.000000e+00 #   gh : 0.0\n")
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("## INFORMATION FOR SMINPUTS\n")
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("BLOCK SMINPUTS #\n")
        f_madspin_LHE.write("      1 {:e} #   aewm1\n".format(process.alphaem_inv))
        f_madspin_LHE.write("      2 {:e} #   gf\n".format(process.G_F))
        f_madspin_LHE.write("      3 {:e} #   as\n".format(process.alphaqcd))
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("## INFORMATION FOR YUKAWA\n")
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("BLOCK YUKAWA #\n")
        f_madspin_LHE.write("      5 {:e} #   ymb\n".format(process.mass_b))
        f_madspin_LHE.write("      6 {:e} #   ymt\n".format(process.mass_t))
        f_madspin_LHE.write("      15 {:e} #   ymtau\n".format(process.mass_tau))
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("## INFORMATION FOR QNUMBERS 82\n")
        f_madspin_LHE.write("###################################\n")
        f_madspin_LHE.write("BLOCK QNUMBERS 82 #   gh\n")
        f_madspin_LHE.write("      1 0 #   3 times electric charge\n")
        f_madspin_LHE.write("      2 1 #   number of spin states (2s+1)\n")
        f_madspin_LHE.write("      3 8 #   colour rep (1: singlet, 3: triplet, 8: octet)\n")
        f_madspin_LHE.write("      4 1 #   particle/antiparticle distinction (0=own anti)\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#*************************\n")
        f_madspin_LHE.write("#      Decay widths      *\n")
        f_madspin_LHE.write("#*************************\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  1   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  2   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  3   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  4   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  5   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        # Scale t BRs down so that sum is 1.0
        BR_t_to_any = process.BR_t_to_Wb + process.BR_t_to_Ws + process.BR_t_to_Wd
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  6   {:e}\n".format(process.width_t))
        f_madspin_LHE.write("#  BR             NDA  ID1    ID2   ...\n")
        f_madspin_LHE.write("   {:e}   2    5  24 # 1.32\n".format(process.BR_t_to_Wb / BR_t_to_any))
        f_madspin_LHE.write("   {:e}   2    3  24 # 1.32\n".format(process.BR_t_to_Ws / BR_t_to_any))
        f_madspin_LHE.write("   {:e}   2    1  24 # 1.32\n".format(process.BR_t_to_Wd / BR_t_to_any))
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  -6   {:e}\n".format(process.width_t))
        f_madspin_LHE.write("#  BR             NDA  ID1    ID2   ...\n")
        f_madspin_LHE.write("   {:e}   2   -5 -24 # 1.32\n".format(process.BR_t_to_Wb / BR_t_to_any))
        f_madspin_LHE.write("   {:e}   2   -3 -24 # 1.32\n".format(process.BR_t_to_Ws / BR_t_to_any))
        f_madspin_LHE.write("   {:e}   2   -1 -24 # 1.32\n".format(process.BR_t_to_Wd / BR_t_to_any))
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  11   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  12   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  13   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  14   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  15   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  16   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  21   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  22   0.000000e+00\n")
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  23   {:e}\n".format(process.width_Z))
        f_madspin_LHE.write("#\n")
        # Scale W BRs down so that sum is 1.0
        BR_W_to_any = process.BR_W_to_hadrons + process.BR_W_to_leptons
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  -24   {:e}\n".format(process.width_W))
        f_madspin_LHE.write("#  BR             NDA  ID1    ID2   ...\n")
        f_madspin_LHE.write("      {:e}   2    1  -2\n".format((process.BR_W_to_hadrons / 2.) / BR_W_to_any))
        f_madspin_LHE.write("      {:e}   2    3  -4\n".format((process.BR_W_to_hadrons / 2.) / BR_W_to_any))
        f_madspin_LHE.write("      {:e}   2   11 -12\n".format((process.BR_W_to_leptons / 3.) / BR_W_to_any))
        f_madspin_LHE.write("      {:e}   2   13 -14\n".format((process.BR_W_to_leptons / 3.) / BR_W_to_any))
        f_madspin_LHE.write("      {:e}   2   15 -16\n".format((process.BR_W_to_leptons / 3.) / BR_W_to_any))
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  24   {}\n".format(process.width_W))
        f_madspin_LHE.write("#  BR             NDA  ID1    ID2   ...\n")
        f_madspin_LHE.write("      {:e}   2   -1   2\n".format((process.BR_W_to_hadrons / 2.) / BR_W_to_any))
        f_madspin_LHE.write("      {:e}   2   -3   4\n".format((process.BR_W_to_hadrons / 2.) / BR_W_to_any))
        f_madspin_LHE.write("      {:e}   2  -11  12\n".format((process.BR_W_to_leptons / 3.) / BR_W_to_any))
        f_madspin_LHE.write("      {:e}   2  -13  14\n".format((process.BR_W_to_leptons / 3.) / BR_W_to_any))
        f_madspin_LHE.write("      {:e}   2  -15  16\n".format((process.BR_W_to_leptons / 3.) / BR_W_to_any))
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  25   {:e}\n".format(process.width_H))
        f_madspin_LHE.write("#\n")
        f_madspin_LHE.write("#      PDG        Width\n")
        f_madspin_LHE.write("DECAY  82   0.000000e+00\n")
        f_madspin_LHE.write("</slha>\n")
        f_madspin_LHE.write(post_header)
        for event in LHE.event_iterator(input_LHE_events):
            f_madspin_LHE.write(event)
        f_madspin_LHE.write(closing_string)

    # Rename LHE files
    shutil.move(input_LHE_events, "{}.undecayed".format(input_LHE_events))
    shutil.move("madspin_LHE_input.lhe", input_LHE_events)

    # Write MadSpin runcard
    with open("madspin_runcard.txt", "wb") as f_madspin_runcard:
        f_madspin_runcard.write("import {}\n".format(input_LHE_events))
        f_madspin_runcard.write("set spinmode {}\n".format(process.MadSpin_mode))
        for decay in process.MadSpin_decays:
            f_madspin_runcard.write("{0}\n".format(decay))
        f_madspin_runcard.write("launch\n")
        f_madspin_runcard.write("quit\n")


@timed("MadSpin executable")
def __run_executable(executable):
    """! Run MadSpin executable."""
    logger.info("MadSpin executable: {}".format(executable))
    with open("madspin_runcard.txt", "rb") as runcard_input:
        processes = [SingleProcessThread([executable], stdin=runcard_input, ignore_output=["INFO:", "MadSpin>"])]
        manager = ProcessManager(processes)
        while manager.monitor():
            pass


def __prepare_outputs(input_LHE_events):
    """! Prepare MadSpin output."""
    logger.info("Preparing MadSpin output")

    # Unzip MadSpin events
    subprocess.call("gunzip pwgevents_decayed.lhe.gz 2> /dev/null", shell=True)
    shutil.move("pwgevents_decayed.lhe", "{}.decayed".format(input_LHE_events))

    # Combine headers
    pwg_opening_string = LHE.get_opening_string("{}.undecayed".format(input_LHE_events))
    pwg_closing_string = LHE.get_closing_string("{}.undecayed".format(input_LHE_events))
    madspin_opening_string = LHE.get_opening_string("{}.decayed".format(input_LHE_events))

    # Split Powheg headers to insert MadSpin information
    if pwg_opening_string.find("<header>") != -1:
        pwg_pre_header = pwg_opening_string[: pwg_opening_string.find("<header>") + 8]
        pwg_post_header = pwg_opening_string[pwg_opening_string.find("</header>") + 10:]
    else:
        pwg_pre_header = pwg_opening_string[: pwg_opening_string.find("<init>")] + "<header>"
        pwg_post_header = pwg_opening_string[pwg_opening_string.find("<init>"):]
    madspin_header = madspin_opening_string[madspin_opening_string.find("<header>") + 8: madspin_opening_string.find("</header>") + 10]

    # Write events to LHE file with MadSpin information
    with open("pwgevents_with_MadSpin.lhe", "wb") as f_combined_LHE:
        f_combined_LHE.write(pwg_pre_header)
        f_combined_LHE.write(madspin_header)
        f_combined_LHE.write(pwg_post_header)
        for event in LHE.event_iterator("{}.decayed".format(input_LHE_events)):
            f_combined_LHE.write(event)
        f_combined_LHE.write(pwg_closing_string)

    # Rename output file
    if os.path.isfile(input_LHE_events):
        shutil.move(input_LHE_events, "madspin_LHE.input")
    shutil.move("pwgevents_with_MadSpin.lhe", input_LHE_events)

    for LHE_tarball in list(set(glob.glob("*lhe*.gz") + glob.glob("*events*.gz"))):
        logger.info("Cleaning up MadSpin tarball: {}".format(LHE_tarball))
        os.remove(LHE_tarball)
