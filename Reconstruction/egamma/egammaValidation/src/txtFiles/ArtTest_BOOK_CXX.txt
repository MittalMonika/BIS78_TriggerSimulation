#include <AsgTools/MessageCheck.h>
#include "ArtTest.h"

#include "xAODEventInfo/EventInfo.h"
#include "xAODTracking/VertexContainer.h"
#include "xAODTracking/TrackParticle.h"

#include "xAODEgamma/ElectronContainer.h"
#include "xAODEgamma/PhotonContainer.h"
#include "xAODEgamma/PhotonAuxContainer.h"
#include "xAODEgamma/Egamma.h"
#include "xAODEgamma/Photon.h"
#include "xAODEgamma/Electron.h"
#include "xAODEgamma/EgammaxAODHelpers.h"

#include "ElectronPhotonSelectorTools/AsgElectronLikelihoodTool.h"

#include <vector>
#include <cmath>

using namespace std;

ArtTest :: ArtTest (const std::string& name, ISvcLocator *pSvcLocator) : 
  AthAlgorithm (name, pSvcLocator),
  m_ElectronPlots (0, "Electron/")   
{
  declareProperty( "ElectronContainerName", m_electronContainerName = "ElectronCollection" );
}

// ******

StatusCode ArtTest :: initialize ()
{
  ANA_MSG_INFO ("******************************* Initializing *******************************");

  //*****************LLH Requirement********************
  m_LooseLH = new AsgElectronLikelihoodTool("LooseLH");
  m_LooseLH->setProperty("WorkingPoint", "LooseLHElectron");
  m_LooseLH->msg().setLevel(MSG::INFO);

  if( m_LooseLH->initialize().isFailure()) {
    ATH_MSG_INFO("Initialization Selectors FAILED");
    return StatusCode::FAILURE;
  }
  else  ATH_MSG_INFO("Retrieved Selector tool ");
  //****************************************************

  ANA_MSG_INFO ("*******************************  OK LLH Req  *******************************");

  //*****************MLH Requirement********************
  m_MediumLH = new AsgElectronLikelihoodTool("MediumLH"); 
  m_MediumLH->setProperty("WorkingPoint", "MediumLHElectron");
  m_MediumLH->msg().setLevel(MSG::INFO);

  if( m_MediumLH->initialize().isFailure()) {
    ATH_MSG_INFO("Initialization Selectors FAILED");    
    return StatusCode::FAILURE;
  } 
  else  ATH_MSG_INFO("Retrieved Selector tool ");
  //****************************************************

  ANA_MSG_INFO ("*******************************  OK MLH Req  *******************************");

  //*****************TLH Requirement********************
  m_TightLH = new AsgElectronLikelihoodTool("TightLH");
  m_TightLH->setProperty("WorkingPoint", "TightLHElectron");
  m_TightLH->msg().setLevel(MSG::INFO);

  if( m_TightLH->initialize().isFailure()) {
    ATH_MSG_INFO("Initialization Selectors FAILED");
    return StatusCode::FAILURE;
  }
  else  ATH_MSG_INFO("Retrieved Selector tool ");
  //****************************************************

  ANA_MSG_INFO ("*******************************  OK TLH Req  *******************************");
  ANA_MSG_INFO ("*******************************   END INIT   *******************************");
  
  m_ElectronPlots.initialize();
  std::vector<HistData> hists = m_ElectronPlots.retrieveBookedHistograms();

  return StatusCode::SUCCESS;
}

// ******

StatusCode ArtTest :: beginInputFile ()
{
  return StatusCode::SUCCESS;
}

// ******

StatusCode ArtTest :: firstExecute ()
{
  return StatusCode::SUCCESS;
}

// ******

StatusCode ArtTest :: execute ()
{
  
  // Retrieve eventInfo from the event store
  const xAOD::EventInfo *eventInfo = nullptr;
  ANA_CHECK (evtStore()->retrieve(eventInfo, "EventInfo"));

  const xAOD::ElectronContainer* RecoEl = 0;
  if( !evtStore()->retrieve(RecoEl, "Electrons").isSuccess() ) {
    Error("execute()", "Failed to retrieve electron container. Exiting.");
    return StatusCode::FAILURE;
  }

  //  bool isLLH = 0, isMLH = 0, isTLH = 0;
  
  for(auto elrec : *RecoEl) {
    
    /*
    if(m_LooseLH->accept(elrec) ) isLLH = 1;
    if(m_MediumLH->accept(elrec)) isMLH = 1;
    if(m_TightLH->accept(elrec) ) isTLH = 1;
    */

    m_ElectronPlots.fill(*elrec);//, isLLH, isMLH, isTLH); //m_LooseLH->accept(elrec), m_MediumLH->accept(elrec), m_TightLH->accept(elrec));
    
    const xAOD::TrackParticle* tp = elrec->trackParticle();
    if(RecoEl->size() > 0 && (eventInfo->eventNumber())%10 == 0) cout << "CIAO the size is " << RecoEl->size() << " and the pt is " << (tp->pt())/1000. << endl;
      if( m_LooseLH->accept(elrec) ) {
	if(eventInfo->eventNumber()%2 == 0) cout << "Loose,  the pt is \t" << (tp->pt())/1000. << "\t and the evt# is " << eventInfo->eventNumber() << endl;
    }
    if( m_MediumLH->accept(elrec) ) {
      if(eventInfo->eventNumber()%2 == 0) cout << "Medium, the pt is \t" << (tp->pt())/1000. << "\t and the evt# is " << eventInfo->eventNumber() << endl;
    }
    if( m_TightLH->accept(elrec) ) {
      if(eventInfo->eventNumber()%2 == 0) cout << "Tight,  the pt is \t" << (tp->pt())/1000. << "\t and the evt# is " << eventInfo->eventNumber() << endl;
    }
      
}
  
  return StatusCode::SUCCESS;
}

// ******

StatusCode ArtTest :: finalize ()
{
  ANA_MSG_INFO ("******************************** Finalizing ********************************");

  m_ElectronPlots.finalize();
  
  return StatusCode::SUCCESS;
}
