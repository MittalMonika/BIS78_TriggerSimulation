/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// Dear emacs, this is -*-c++-*-
// Andrei Gaponenko <agaponenko@lbl.gov>, 2008

#include "StoreGate/StoreGateSvc.h"

template<class TransientVectorType, class PersistentVectorType, class ElementCnv>
void VectorCnv_p1<TransientVectorType,PersistentVectorType,ElementCnv>
::persToTrans(const PersistentVectorType* pers,
	      TransientVectorType* trans, 
	      MsgStream& msg ) 
{
  msg<<MSG::DEBUG<<"VectorCnv_p1::persToTrans() begin [Pers: "
     <<typeid(PersistentVectorType).name()
     <<", Trans: "<<typeid(TransientVectorType).name()
     <<"]"
     <<endreq;

  trans->resize(pers->size());
  for(typename PersistentVectorType::size_type i=0; i < pers->size(); ++i) {
    m_cnv.persToTrans(&((*pers)[i]), &((*trans)[i]), msg);
  }

  msg<<MSG::DEBUG<<"VectorCnv_p1::persToTrans() end"<<endreq;
}

template<class TransientVectorType, class PersistentVectorType, class ElementCnv>
void VectorCnv_p1<TransientVectorType,PersistentVectorType,ElementCnv>
::transToPers(const TransientVectorType* trans, 
	      PersistentVectorType* pers, 
	      MsgStream& msg ) 
{
  msg<<MSG::DEBUG<<"VectorCnv_p1::transToPers() begin [Pers: "
     <<typeid(PersistentVectorType).name()
     <<", Trans: "<<typeid(TransientVectorType).name()
     <<"]"
     <<endreq;

  pers->resize(trans->size());
  
  for(typename TransientVectorType::size_type i=0; i < trans->size(); ++i) {
    m_cnv.transToPers(&((*trans)[i]), &((*pers)[i]), msg);
  }
  
  msg<<MSG::DEBUG<<"VectorCnv_p1::transToPers() end"<<endreq;
}
